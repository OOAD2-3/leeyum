# Generated by Django 2.2.10 on 2020-02-16 14:09

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserStore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gmt_modified', models.DateTimeField(verbose_name='修改时间')),
                ('gmt_created', models.DateTimeField(verbose_name='创建时间')),
                ('phone_number', models.CharField(max_length=11, verbose_name='电话')),
                ('profile_avatar_url', models.CharField(max_length=256, verbose_name='头像')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ArticleStore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gmt_modified', models.DateTimeField(verbose_name='修改时间')),
                ('gmt_created', models.DateTimeField(verbose_name='创建时间')),
                ('title', models.CharField(max_length=1024, verbose_name='标题')),
                ('pic_urls', models.CharField(max_length=2048, verbose_name='图片url')),
                ('content', models.CharField(max_length=1024, verbose_name='详情内容')),
            ],
            options={
                'db_table': 'leeyum_article',
            },
        ),
        migrations.CreateModel(
            name='CategoryStore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gmt_modified', models.DateTimeField(verbose_name='修改时间')),
                ('gmt_created', models.DateTimeField(verbose_name='创建时间')),
                ('name', models.CharField(max_length=128, verbose_name='类目名字')),
                ('intro', models.CharField(max_length=256, verbose_name='类目介绍')),
                ('parent', models.IntegerField(default=0, verbose_name='上级id')),
            ],
            options={
                'db_table': 'leeyum_category',
            },
        ),
        migrations.CreateModel(
            name='TagStore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gmt_modified', models.DateTimeField(verbose_name='修改时间')),
                ('gmt_created', models.DateTimeField(verbose_name='创建时间')),
                ('name', models.CharField(max_length=128, verbose_name='标签名字')),
                ('intro', models.CharField(max_length=256, verbose_name='标签介绍')),
            ],
            options={
                'db_table': 'leeyum_tag',
            },
        ),
        migrations.CreateModel(
            name='CommentStore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gmt_modified', models.DateTimeField(verbose_name='修改时间')),
                ('gmt_created', models.DateTimeField(verbose_name='创建时间')),
                ('comment_parents', models.IntegerField(default=0, verbose_name='评论回复上层id')),
                ('comment_message', models.CharField(max_length=1024, verbose_name='评论信息')),
                ('comment_article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leeyum.ArticleStore')),
                ('comment_publisher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'leeyum_comment',
            },
        ),
        migrations.AddField(
            model_name='articlestore',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leeyum.CategoryStore'),
        ),
        migrations.AddField(
            model_name='articlestore',
            name='tags',
            field=models.ManyToManyField(to='leeyum.TagStore'),
        ),
    ]
